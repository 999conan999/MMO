import React, { Component } from 'react';
import './editer.css';
import { connect } from 'react-redux';
import {makeid} from '../fs.js'
import { Editor } from '@tinymce/tinymce-react';
import { toast } from 'react-toastify';
import {Segment,Button,Grid, Form, TextArea } from 'semantic-ui-react';

const icon_media=<svg  fill={'#2185d0'} width={'25px'} height={'25px'} style={{marginRight:'75px'}} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><path d="M618.9 160.8l-208 69.33C404.4 232.3 400 238.5 400 245.3v172.4C394.9 416.7 389.6 416 384 416c-35.35 0-64 21.49-64 48s28.65 48 64 48c35.35 0 64-21.49 64-48V319l144-48v82.7C586.9 352.7 581.6 352 576 352c-35.35 0-64 21.49-64 48s28.65 48 64 48c35.35 0 64-21.49 64-48V176C640 165.1 629.3 157.4 618.9 160.8zM176 392c-8.836 0-16-7.164-16-16V96H40.2C17.1 96 0 113.1 0 136.2v271.7C0 430.1 17.93 448 40.13 448h249.8c5.904-25.11 25.54-45.43 52.31-56H176zM104 384c0 4.418-3.582 8-8 8H64c-4.418 0-8-3.582-8-8v-32c0-4.418 3.582-8 8-8h32c4.418 0 8 3.582 8 8V384zM104 288c0 4.418-3.582 8-8 8H64C59.58 296 56 292.4 56 288V256c0-4.418 3.582-8 8-8h32c4.418 0 8 3.582 8 8V288zM104 192c0 4.418-3.582 8-8 8H64C59.58 200 56 196.4 56 192V160c0-4.418 3.582-8 8-8h32c4.418 0 8 3.582 8 8V192zM235.6 320H368V255.1L301.3 256C296.3 256 291.7 253.2 289.4 248.7c-2.275-4.473-1.846-9.844 1.111-13.9l58.33-80c2.514-3.445 6.518-5.479 10.78-5.479s8.261 2.033 10.77 5.479l18.63 25.55l52.29-78.42C443.8 98.23 447.1 96 452.4 96c4.457 0 8.621 2.227 11.09 5.938l41.98 62.97L608 130.8V44.67C608 19.1 588.5 0 564.4 0H235.6C211.5 0 192 19.1 192 44.67v230.7C192 300 211.5 320 235.6 320zM288 64c17.68 0 32 14.33 32 32S305.7 128 288 128C270.3 128 256 113.7 256 96S270.3 64 288 64z"/></svg>
class Editer extends Component {
  constructor (props) {
    super(props)
    // this.myRef1 = React.createRef();
    this.state = {
        data:'',
        selected_img:{
            type:'',//img_editer
        },
        loading:true,
        step:0,
        is_show_GPT_by_btn:false,
        data_bot:{
            mt_sp:'',
            key_des:'',
            dt_kh:'',
            cot_truyen:''
        }
    }
  }
  componentDidMount(){
    // setTimeout(()=>{
    //     window.tinymce.execCommand('mceSetContent', false ,this.props.data);
    //     this.setState({loading:false})
    // },1000)
    this.setState({
        data:this.props.data
    })
  }
  componentWillReceiveProps(nextProps){
        if(nextProps.img_result.length>0 && this.state.selected_img.type==nextProps.keyLock){
            this.setState({
                selected_img:{
                    type:'',//img_editer
                },
            });
            if(nextProps.img_text_result!=""){
                window.tinymce.execCommand('mceInsertContent', false ,"<figure class='image'> <img class='lazyload'  alt='"+nextProps.img_text_result+"' title='"+nextProps.img_text_result+"' src='"+nextProps.img_result[0].url300+"' data-srcset='"+nextProps.img_result[0].url+"' ><figcaption>"+nextProps.img_text_result+"</figcaption> </figure><p></p>")
            }else{
                window.tinymce.execCommand('mceInsertContent', false ,"<img class='lazyload' src='"+nextProps.img_result[0].url300+"' data-srcset='"+nextProps.img_result[0].url+"'><p></p>") 
            }
            this.props.closeAction();
        }
  }
 
  render() {
    let {data,loading,step,is_show_GPT_by_btn,data_bot}=this.state;
    let is_show_GPT_prompt_by_dk=false;
    let data_prompt=this.props.data_prompt_GPT;
    console.log("üöÄ ~ file: Editer.js:53 ~ Editer ~ render ~ data_prompt:", data_prompt)
    if(this.props.data_prompt_GPT!=undefined&&this.props.data_prompt_GPT!=null){
        is_show_GPT_prompt_by_dk=true;
    }
    let is_show_buoc_1=false;
    if(data_bot.mt_sp!=''&&data_bot.key_des!=''&&data_bot.dt_kh!=''){
        is_show_buoc_1=true;
    }
      return (
        <React.Fragment>
            <div>
                <div className='wrap-editer'  style={(step==2||step==3)?{top:"25vh"}:{}}>
                    {/* <h3>XXX:</h3> */}
                    <div className='eidex' style={{margin:"0px 200px"}}>
                            <Grid>
                                <Grid.Column width={is_show_GPT_by_btn?10:16}>
                                    <Segment loading={loading}>
                                        <div className='add-img'>
                                        <div className='zdas'>
                                            <button className='btn-addMe'
                                                onClick={()=>{
                                                    let keyLock=makeid(6);
                                                    this.setState({
                                                        selected_img:{
                                                            type:keyLock,
                                                        }
                                                    });
                                                    this.props.openAction({
                                                        type:"OPEN",
                                                        is_muti_selected:false,
                                                        keyLock:keyLock,
                                                        show_description_img:true
                                                    })
                                                }}
                                            >
                                            {icon_media}<span>Add media</span>
                                            </button>
                                        </div>
                                        </div>
                                        <Editor
                                        tinymceScriptSrc={process.env.PUBLIC_URL + '/tinymce/tinymce.min.js'}
                                        // onInit={(evt, editor) => this.myRef1.current = editor}
                                        onEditorChange={(evt) => this.setState({data:evt})}
                                        value={data}
                                        init={{
                                            height: 650,
                                            menubar: true,
                                            relative_urls: false,
                                            remove_script_host: false,
                                            plugins: [
                                            'advlist', 'autolink', 'lists', 'link', 'image', 'charmap',
                                            'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',
                                            'insertdatetime', 'media', 'table', 'preview', 'help', 'wordcount'
                                            ],
                                            toolbar: 
                                            'blockquote | blocks |'+'fontsize bold italic underline forecolor backcolor | alignleft aligncenter alignright alignjustify'+'| unlink | link |' +
                                            '| bullist numlist ' +
                                            'removeformat |'+' code | image| fontsizeselect | insertfile'+'| table |',
                                            toolbar_mode: 'wrap',
                                            content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }',
                                            entity_encoding : "raw",
                                            image_dimensions: false,

                                        }}
                                        onLoadContent={() =>{
                                            setTimeout(()=>{
                                                window.tinymce.execCommand('mceSetContent', false ,this.props.data);
                                                this.setState({loading:false})
                                            },300)
                                        }}
                                        />
                                    </Segment>    
                                </Grid.Column>
                                {is_show_GPT_by_btn&&<Grid.Column width={6}>
                                    <Segment>
                                    <div className='wra-gpt'>
                                        {step>5&&<div>
                                            <span>B∆∞·ªõc 7:Kinh nghi·ªám khi mua "{data_prompt.key_word}":</span><br/>
                                            {data_bot.cot_truyen!=""&&<Button content='Get data' icon={step>6?'check':'right arrow'} labelPosition='right' className='mgt-gpt' 
                                                onClick={()=>{
                                                    let {data}=this.state;
                                                    if(step==6){
                                                        data+=`<h2>Kinh nghi·ªám khi mua ${data_prompt.key_word}</h2>`;
                                                        this.setState({step:7,data:data});
                                                    }
                                                    let data_rs_text=`OK, l√†m r·∫•t t·ªët. Ti·∫øp ƒë·∫øn, h√£y ƒë√≥ng vai l√† m·ªôt trong c√°c ƒë·ªëi t∆∞·ª£ng mua s·∫£n ph·∫©m ƒë∆∞·ª£c n√™u ·ªü tr√™n, k·ªÉ v·ªÅ c√¢u chuy·ªán c·ªßa ch√≠nh m√¨nh, c√≥ b·ªë c·ª•c r√µ r√†ng, v√† c√≥ d√†n √Ω nh∆∞ sau: "${data_bot.cot_truyen}". L∆∞u √Ω, c√¢u chuy·ªán n√†y t·∫≠p trung v√¥ SEO "${data_prompt.key_word}", n√™n h√£y ph√¢n b·ªï th√™m c√°c t·ª´ kh√≥a li√™n quan ƒë√£ ph√¢n tich ·ªü tr√™n v√†o c√¢u chuy·ªán, v√† h√£y s√°ng t·∫°o th√™m nh·ªØng t√¨nh hu·ªëng k·ªãch t√≠nh cho c√¢u chuy·ªán tr·ªü n√™n l√¥i cu·ªën. C·ªë g·∫Øng s·ª≠ d·ª•ng c√°c t·ª´ vi·∫øt t·∫Øt, th√†nh ng·ªØ, c·ª•m t·ª´ chuy·ªÉn ti·∫øp, th√°n t·ª´, t·ª´ b·ªï nghƒ©a v√† t·ª´ th√¥ng t·ª•c, ƒë·ªìng th·ªùi tr√°nh c√°c c·ª•m t·ª´ l·∫∑p l·∫°i v√† c·∫•u tr√∫c c√¢u kh√¥ng t·ª± nhi√™n. k·∫øt qu·∫£ tr·∫£ v·ªÅ l√† c√°c th·∫ª html t∆∞∆°ng ·ª©ng (chu·∫©n SEO), kh√¥ng g·ªìm <html>, <head>, <body>, <div>. (n·ªôi dung t·ªëi thi·ªÉu 400 t·ª´)`;
                                                    toast.success('Copy th√†nh c√¥ng! b·∫°n past v√†o chat GPT.', { theme: "colored" });
                                                    navigator.clipboard.writeText(data_rs_text);
                                                }}
                                            />}
                                            <Form>
                                                <TextArea placeholder='ng∆∞·ªùi n√†y t√¨m mua gi∆∞·ªùng ng·ªß, ph·∫£i ƒë·∫Øng ƒëo l·ª±a ch·ªçn kh√¥ng bi·∫øt ch·ªçn lo·∫°i gi∆∞·ªùng g·ªó hay gi∆∞·ªùng s·∫Øt, th√¥ng qua m·ªôt ng∆∞·ªùi b·∫°n ch·ªâ d·∫´n, anh ta ƒë√£ bi·∫øt ƒë·∫øn n·ªôi th·∫•t An B√¨nh c√≥ b√°n gi∆∞·ªùng s·∫Øt gi√° r·∫ª, anh ta li√™n h·ªá v√† ƒë∆∞·ª£c h·ªó tr·ª£ r·∫•t t·∫≠n t√¨nh, ch·∫ø ƒë·ªô d·ªãch v·ª• t·ªët, v√† t·ª´ ƒë√≥ anh ta r·∫•t h√†i l√≤ng, v√† gi·ªõi thi·ªáu th√™m b·∫°n b√®' 
                                                    value={data_bot.cot_truyen}
                                                    onChange={(e,{value})=>{
                                                        let {data_bot}=this.state;
                                                        data_bot.cot_truyen=value;
                                                        this.setState({data_bot:data_bot})
                                                    }}
                                                />
                                            </Form>
                                            
                                        </div>}
                                         {step>4&&<div>
                                            <span>B∆∞·ªõc 6:H√¨nh ·∫£nh th·ª±c t·∫ø s·∫£n ph·∫©m:</span><br/>
                                            <Button content='Get data' icon={step>5?'check':'right arrow'} labelPosition='right' className='mgt-gpt' 
                                                onClick={()=>{
                                                    let {data}=this.state;
                                                    if(step==5){
                                                        data+=`<h2>H√¨nh ·∫£nh th·ª±c t·∫ø s·∫£n ph·∫©m</h2>`;
                                                        this.setState({step:6,data:data});
                                                    }
                                                }}
                                            />
                                        </div>}
                                         {step>3&&<div>
                                            <span>B∆∞·ªõc 5:{data_prompt.key_word} th√≠ch h·ª£p cho ƒë·ªëi t∆∞·ª£ng n√†o:</span><br/>
                                            <Button content='Get data' icon={step>4?'check':'right arrow'} labelPosition='right' className='mgt-gpt' 
                                                onClick={()=>{
                                                    let {data}=this.state;
                                                    if(step==4){
                                                        data+=`<h2>${data_prompt.key_word} th√≠ch h·ª£p cho ƒë·ªëi t∆∞·ª£ng n√†o</h2>`;
                                                        this.setState({step:5,data:data});
                                                    }
                                                    let data_rs_text=`OK, l√†m t·ªët l·∫Øm. Ti·∫øp theo, t·ª´ d·ªØ li·ªáu c·ªßa google v√† th√¥ng tin s·∫£n ph·∫©m ·ªü tr√™n, h√£y li·ªát k√™ 8 ƒë·ªëi t∆∞·ª£ng n√™n s·ª≠ d·ª•ng "${data_prompt.key_word}", v√† gi·∫£i th√≠ch v√¨ sao, cho th√™m v√≠ d·ª• minh h·ªça. C·ªë g·∫Øn s·ª≠ d·ª•ng c√°c t·ª´ kh√≥a li√™n quan v√† t·ª´ kh√≥a ch√≠nh. B√†i vi·∫øt t·ªëi thi·ªÉu 300 t·ª´, C·ªë g·∫Øng s·ª≠ d·ª•ng c√°c t·ª´ vi·∫øt t·∫Øt, th√†nh ng·ªØ, c·ª•m t·ª´ chuy·ªÉn ti·∫øp, th√°n t·ª´, t·ª´ b·ªï nghƒ©a v√† t·ª´ th√¥ng t·ª•c, ƒë·ªìng th·ªùi tr√°nh c√°c c·ª•m t·ª´ l·∫∑p l·∫°i v√† c·∫•u tr√∫c c√¢u kh√¥ng t·ª± nhi√™n. k·∫øt qu·∫£ tr·∫£ v·ªÅ l√† c√°c th·∫ª html t∆∞∆°ng ·ª©ng (chu·∫©n SEO), kh√¥ng g·ªìm <html>, <head>, <body>, <div>. (n·ªôi dung t·ªëi thi·ªÉu 400 t·ª´)`;
                                                    toast.success('Copy th√†nh c√¥ng! b·∫°n past v√†o chat GPT.', { theme: "colored" });
                                                    navigator.clipboard.writeText(data_rs_text);
                                                }}
                                            />
                                        </div>}
                                         {step>2&&<div>
                                            <span>B∆∞·ªõc 4:ƒê·∫∑c ƒëi·ªÉm c·ªßa "{data_prompt.key_word}":</span><br/>
                                            <Button content='Get data' icon={step>3?'check':'right arrow'} labelPosition='right' className='mgt-gpt' 
                                                onClick={()=>{
                                                    let {data}=this.state;
                                                    if(step==3){
                                                        data+=`<h2>Th√¥ng tin v·ªÅ ${data_prompt.key_word}</h2>`;
                                                        this.setState({step:4,data:data});
                                                    }
                                                    let data_rs_text=`OK, r·∫•t t·ªët. Ti·∫øp theo, t·ª´ nh·ªØng th√¥ng tin s·∫£n ph·∫©m n√™u ·ªü tr√™n, h√£y k·∫øt h·ª£p v·ªõi d·ªØ li·ªáu t·ª´ google v·ªõi c√°c n·ªôi dung li√™n quan, h√£y ph√¢n t√≠ch chi ti·∫øt c√°c th√¥ng tin s·∫£n ph·∫©m ƒë√£ ƒë∆∞a ra ·ªü tr√™n, nh·∫±m m·ª•c ƒë√≠ch cho ng∆∞·ªùi d√πng hi·ªÉu r√µ v·ªÅ s·∫£n ph·∫©m h∆°n. ƒêi·ªÅu ki·ªán ƒë·∫∑t ra l√† n·ªôi dung xoay quanh c√°c t·ª´ kh√≥a li√™n quan. C·ªë g·∫Øng s·ª≠ d·ª•ng c√°c t·ª´ vi·∫øt t·∫Øt, th√†nh ng·ªØ, c·ª•m t·ª´ chuy·ªÉn ti·∫øp, th√°n t·ª´, t·ª´ b·ªï nghƒ©a v√† t·ª´ th√¥ng t·ª•c, ƒë·ªìng th·ªùi tr√°nh c√°c c·ª•m t·ª´ l·∫∑p l·∫°i v√† c·∫•u tr√∫c c√¢u kh√¥ng t·ª± nhi√™n. k·∫øt qu·∫£ tr·∫£ v·ªÅ l√† c√°c th·∫ª html t∆∞∆°ng ·ª©ng (chu·∫©n SEO), kh√¥ng g·ªìm <html>, <head>, <body>, <div>. (n·ªôi dung t·ªëi thi·ªÉu 400 t·ª´)`;
                                                    toast.success('Copy th√†nh c√¥ng! b·∫°n past v√†o chat GPT.', { theme: "colored" });
                                                    navigator.clipboard.writeText(data_rs_text);
                                                }}
                                            />
                                        </div>}
                                        {step>1&&<div>
                                            <span>B∆∞·ªõc 3:T·∫°o M√¥ t·∫£ ng·∫Øn cho s·∫£n ph·∫©m n√†y:</span><br/>
                                            <Button content='Get data' icon={step>2?'check':'right arrow'} labelPosition='right' className='mgt-gpt' 
                                                onClick={()=>{
                                                    if(step==2){
                                                        this.setState({step:3});
                                                    }
                                                    let data_rs_text=`OK, r·∫•t t·ªët, ti·∫øp ƒë·∫øn h√£y vi·∫øt cho t√¥i 2 m·∫´u t√≥m t·∫Øt th√¥ng tin s·∫£n ph·∫©m (t·ªëi ƒëa 200 t·ª´). ƒêi·ªÅu ki·ªán l√† ch·ª©a t·ª´ kh√≥a ch√≠nh: "${data_prompt.key_word}", v√† c√°c t·ª´ khoa li√™n quan, ng√¥n ng·ªØ L√¥i cu·ªëng, k√≠ch th√≠ch t√≤ m√≤ cho ƒë√¥i t∆∞·ª£ng ƒë√£ n√™u ·ªü tr√™n.`;
                                                    toast.success('Copy th√†nh c√¥ng! b·∫°n past v√†o chat GPT.', { theme: "colored" });
                                                    navigator.clipboard.writeText(data_rs_text);
                                                }}
                                            />
                                        </div>}
                                        {step>0&&<div>
                                            <span>B∆∞·ªõc 2:T·∫°o ti√™u ƒë·ªÅ cho s·∫£n ph·∫©m n√†y:</span><br/>
                                            <Button content='Get data' icon={step>1?'check':'right arrow'} labelPosition='right' className='mgt-gpt' 
                                                onClick={()=>{
                                                    if(step==1){
                                                        this.setState({step:2});
                                                    }
                                                    let data_rs_text=`OK, r·∫•t t·ªët, ti·∫øp ƒë·∫øn h√£y vi·∫øt cho t√¥i 10 m·∫´u ti√™u ƒë·ªÅ gi·ªõi thi·ªáu s·∫£n ph·∫©m. ƒêi·ªÅu ki·ªán l√†  s·ªë k√≠ t·ª± ph√π h·ª£p ƒë·ªÉ hi·ªÉn th·ªã l√™n google, L√¥i cu·ªëng, k√≠ch th√≠ch t√≤ m√≤ cho ƒë√¥i t∆∞·ª£ng ƒë√£ n√™u ·ªü tr√™n, L∆∞u √Ω : ti√™u ƒë·ªÅ ph·∫£i ch·ª©a t·ª´ kh√≥a ch√≠nh: "${data_prompt.key_word}".`;
                                                    toast.success('Copy th√†nh c√¥ng! b·∫°n past v√†o chat GPT.', { theme: "colored" });
                                                    navigator.clipboard.writeText(data_rs_text);
                                                }}
                                            />
                                        </div>}
                                    {is_show_buoc_1&&<div>
                                            <span>B∆∞·ªõc 1:Th·ª±c hi·ªán t·∫°o data cho chat GPT:</span><br/>
                                            <Button content='Get data' icon={step>0?'check':'right arrow'} labelPosition='right' className='mgt-gpt' 
                                                onClick={()=>{
                                                    let prices=`- S·∫£n ph·∫©m c√≥ thu·ªôc t√≠nh ${data_prompt.attribute_name} v√† gi√° t∆∞∆°ng ·ª©ng nh∆∞ sau:
`;
                                                    data_prompt.table_price.forEach(e => {
                                                        prices+=`+ ${data_prompt.attribute_name} ${e.name} c√≥ gi√° l√† ${(Number(e.price_v)+Number(e.price_profit)).toLocaleString('vi-VN', {style : 'currency', currency : 'VND'})},
`;
                                                    });
                                                    let infors=`- C√°c th√¥ng tin li√™n quan c·ªßa s·∫£n ph·∫©m nh∆∞ sau:
`;
                                                    data_prompt.table_infor.forEach(e => {
                                                        infors+=`+ ${e.name} : ${e.value},
`;
});

                                                        let data_rs_text=`T√¥i c√≥ s·∫£n ph·∫©m v·ªõi c√°c th√¥ng tin nh∆∞ sau:
${prices} ${infors} - M√¥ t·∫£ th√™m v·ªÅ s·∫£n ph·∫©m: ${data_bot.mt_sp}.
+ N·ªôi dung c·ªßa s·∫£n ph·∫©m xoay quanh t·ª´ kh√≥a "${data_prompt.key_word}", m·ª•c ƒë√≠ch l√† ƒë·ªÉ t·ªëi ∆∞u h√≥a SEO tr√™n k·∫øt qu·∫£ t√¨m ki·∫øm c·ªßa google. t·ª´ kh√≥a "${data_prompt.key_word}" c√≥ nghƒ©a l√† : "${data_bot.key_des}".
+ ƒê·ªëi t∆∞·ª£ng kh√°ch h√†ng: ${data_bot.dt_kh}.
B·∫°n h√£y tr·∫£ l·ªùi "YES" n·∫øu b·∫°n ƒë√£ hi·ªÉu c√°c d·ªØ li·ªáu m√† t√¥i ƒë∆∞a ra ·ªü tr√™n.
T·ª´ nh·ªØng th√¥ng tin ·ªü tr√™n v√† d·ªØ li·ªáu t√¨m ki·∫øm t·ª´ google, h√£y li·ªát k√™ 15 t·ª´ kh√≥a li√™n quan ƒë·∫øn s·∫£n ph·∫©m n√†y.`
                                                    if(step==0){
                                                        this.setState({step:1});
                                                    }
                                                    toast.success('Copy th√†nh c√¥ng! b·∫°n past v√†o chat GPT.', { theme: "colored" });
                                                    navigator.clipboard.writeText(data_rs_text);
                                                }}
                                            />
                                        </div>}
                                        <div>
                                            <span>M√¥ t·∫£ th√™m v·ªÅ s·∫£n ph·∫©m:</span><br/>
                                            <Form>
                                                <TextArea placeholder='M√¥ t·∫£ h√¨nh d√°ng, ƒë·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t, ch·ª©c nƒÉng n·ªïi b·∫≠t...' 
                                                    value={data_bot.mt_sp}
                                                    onChange={(e,{value})=>{
                                                        let {data_bot}=this.state;
                                                        data_bot.mt_sp=value;
                                                        this.setState({data_bot:data_bot})
                                                    }}
                                                />
                                            </Form>
                                        </div>
                                        <div>
                                            <span>√ù nghƒ©a c·ªßa t·ª´ kh√≥a ch√≠nh: "{data_prompt.key_word}" l√†:</span><br/>
                                            <Form>
                                                <TextArea placeholder='Gi∆∞·ªùng s·∫Øt b√°n ·ªü Gia Lai...' 
                                                    value={data_bot.key_des}
                                                    onChange={(e,{value})=>{
                                                        let {data_bot}=this.state;
                                                        data_bot.key_des=value;
                                                        this.setState({data_bot:data_bot})
                                                    }}
                                                />
                                            </Form>
                                        </div>
                                        <div>
                                            <span>ƒê·ªëi t∆∞·ª£ng kh√°ch h√†ng: "{data_prompt.key_word}" l√†:</span><br/>
                                            <Form>
                                                <TextArea placeholder='H·ªçc sinh, sinh vi√™n, ng∆∞·ªùi c√≥ thu nh·∫≠p th·∫•p...'
                                                    value={data_bot.dt_kh}
                                                    onChange={(e,{value})=>{
                                                        let {data_bot}=this.state;
                                                        data_bot.dt_kh=value;
                                                        this.setState({data_bot:data_bot})
                                                    }}
                                                />
                                            </Form>
                                        </div>




                                    </div>
                                    </Segment>  
                                </Grid.Column>}
                            </Grid>
                    </div>
                    <div className='buttonz-editer'>
                        <button className="ui positive button ABZ bobo"
                            onClick={()=>{
                                 toast.success('C·∫≠p nh·∫≠t th√†nh c√¥ng!', { theme: "colored" });
                                 let {data}=this.state;
                                data=data.replace(new RegExp('"', 'g'), "'")
                                 this.props.rs_data(data)
                            }}
                        >L∆∞u</button>
                        <button className="ui negative button ABZ bobo"
                            onClick={()=>this.props.close()}
                        >H·ªßy</button>
                    </div>
                </div>
            </div>
            {is_show_GPT_prompt_by_dk&&<div className='gpt-wrap'>
                <b>Prompt chat GPT</b>
                <div className='re'>
                    <Button content={is_show_GPT_by_btn?"·∫®n":"Hi·ªán"} icon={is_show_GPT_by_btn>0?'eye':'eye slash'} labelPosition='right' className='mgt-gpt' 
                        onClick={()=>this.setState({is_show_GPT_by_btn:!is_show_GPT_by_btn})}
                    />
                </div>
            </div>}
        </React.Fragment>
      );
  }
}

// 
const mapStateToProps = (state) => ({
    img_result: state.img_result,
    img_text_result: state.img_text_result,
    keyLock:state.keyLock
});

const mapDispatchToProps = (dispatch,props) => ({
    openAction: (data) => dispatch(data),
    closeAction: (type) => dispatch({type:'CLOSE'}),
});
  
  export default connect(mapStateToProps, mapDispatchToProps)(Editer);
  